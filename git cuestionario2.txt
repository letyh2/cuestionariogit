¿Por qué es importante usar Git y por qué ayuda al trabajo colaborativo?
por que registrará los cambios de uno, dos o varios archivos todo el 
tiempo para que si más adelante, necesitamos una versión, podamos recuperarla fácilmente.
además, podrás traer a tu repositorio local los cambios que tus compañeros hayan subido al repositorio
 remoto y podrás ver automáticamente lo que acaba de añadir.

¿Cómo funciona Git? Explica los comandos principales

 Git piensa en tus archivos como un flujo de "imágenes". Por eso, a cada cambio que vayamos realizando le tomará una foto en 
el instante que le indiquemos y todo eso lo almacenará en un repositorio local.

init: Este comando le indica a Git que comenzará a hacer seguimiento de la carpeta actual. En otras palabras, 
comenzará a vigilar esta carpeta. El comando para iniciar el seguimiento de la carpeta sería:

$ git init
Al ejecutar esta línea, Git creará una carpeta oculta llamada .git en el working directory, en la raíz del proyecto.

add: Con este comando estaremos indicando qué archivos queremos que pasen de nuestro working directory 
al staging area. Es decir que los archivos ya han sido modificados y están preparados para la nueva versión del proyecto.

Por ejemplo, si quieremos añadir a nuestro staging area el archivo HTML llamado index.html debemos
 de ejecutar la siguiente línea:

$ git add index.html
Si queremos que todos los archivos del directorio actual se añadan al staging area (definir que ya están preparados),
 ejecutamos la siguiente línea:

$ git add .
commit: Con commit confirmaremos los archivos que declaramos como preparados con el comando
 anterior (add) .Con los archivos confirmados se creará una nueva versión del proyecto.
La estructura del comando es la siguiente:

$ git commit -m 'añadiendo un comentario'
El texto que va dentro de las comillas ('') puede ser cualquiera, te recomiendo que escribas un resumen de lo que estás
 subiendo en ese momento para que tengas una mejor organizacion, además, un buen comentario te servirá si quieres 
volver a una funcionalidad en especial sin tener que leer todo el código y solo guiarte por el comentario de tu commit. Por ejemplo:

$ git commit -m 'Creando estructura HTML'
remote: Con remote vincularemos nuestro repositorio local con nuestro repositorio que se encuentra 
en la "nube" por medio de la url. Este paso no se debe de hacer cada vez que creemos una nueva versión,
 solo cuando queramos especificar el repositorio remoto que tendremos. Entonces, para enlazar nuestro repositorio local
 con nuestro repositorio remoto debemos de ejecutar el siguiente comando:

$ git remote add nombre-remoto url
Normalmente, la mayoría de los developers, como nombre-remoto utiliza origin y url es la "ruta" (url) 
de nuestro repositorio en Github. Por ejemplo, hace un momento he creado el repositorio "prueba" en Github
 y si quiero vincular mi repositorio local con ese repositorio remoto tendría que ejecutar la siguiente línea de comando:

$ git remote add origin https://github.com/michellesegv/prueba.git
push: Por medio de push enviaremos nuestra nueva versión que confirmamos en el commit a nuestro 
repositorio remoto. El comando es el siguiente:

$ git push nombre-remoto master
En nombre-remoto pondremos el mismo nombre-remoto que le hemos asignado al momento de añadir 
la url de nuestro proyecto (en nuestro caso sería origin) y seguido pondremos master, más adelante conoceremos
 el trabajo en "ramas" que tiene Github. Las ramas son una copia paralela que podemos crear de nuestro código
. Por defecto, los repositorios traen una "rama" llamada master y ahora trabajaremos solo en ella, así que subiremos
 nuestros cambios a ella especificando master como el nombre de la rama a la que queremos subir nuestra versión, 
entonces el comando a ejecutar sería:

$ git push origin master
status: Con status conoceremos el estado de los archivos de nuestro repositorio local. 
Es decir, nos dirá si existe un archivo que se ha modificado y no se ha actualizado en el repositorio remoto o si hay 
un archivo que todavía no se "sube" y nos informará si se encuentra en nuestro working directoy o staging area
. Este comando nos resultará muy útil para determinar qué archivos debemos declarar 
como "preparados" (por medio del comando add) y luego "confirmarlos" en la nueva versión (por medio del comando commit) que subiremos a nuestro
 repositorio remoto. El comando para ver el estado de nuestro repositorio local es:

$ git status
pull: Sirve para actualizar nuestro repositorio local al últimocommit que tengamos registrado en el repositorio remoto
. Este comando nos servirá mucho al momento de trabajar colaborativamente porque podremos tener los avances que nuestros
 colaboradores han subido al repositorio remotro a nuestro repositorio local y mantenerlo actualizado. El comando es el siguiente:

$ git pull nombre-remoto master
En nuestro caso, como nuestro nombre-remoto ya lo declaramos como origin y la rama en 
la que estamos trabajando se llama master, el comando sería:

$ git pull origin master



¿Qué se hace con la interfaz de línea de comandos? ¿Para qué sirve?

La línea de comandos es una aplicación que nos permite ver, manejar y manipular 
archivos de nuestra computadora por medio de comandos. Es como el Explorador de Windows
 o Finder en Mac, pero sin la "interfaz".
Por lo tanto, nos da un control que es rápido y automatizado de las computadoras

¿Cuáles son las diferencias y similitudes entre un array y un object?


¿Por qué utilizando arrays y objects podemos crear programas o productos más complejos?
¿Cómo se accede a las propiedades de un valor en JavaScript?
¿Cuál es la diferencia entre una propiedad y un método de un valor?
Al hacer myArray[i] se dice que estamos accediendo a una propiedad... ¿Por qué?
¿Por qué se dice que los métodos se "llaman"?
¿Qué se entiende por un array 2D?
Haz un dibujo de la manera de organizar data de estudiantes como un array de objects
¿Qué son los keys de un object?
¿Cómo podemos acceder a la lista de keys de un object?
¿Qué es un algoritmo? Explica un par de algoritmos que conozcas
Describe en tus propias palabras, qué es un array y un object
Describe en tus propias palabras, qué es una propiedad y un método